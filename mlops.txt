Python=>6/04/20
        variable - int ,float,boolean,str,bytes
        ordered  1)list[2,3,5]
                 2)tuple(1,24,3) immutable like str
         key container- 
                        1)dict {"key":"value"}
                        2)set {"key1","key2"} 9351788883 
                        
                        
         repl =>read eval print loop
         
         python -date type interferance
         python me True/False capatilise(pahle world capital) me hota  
         
         9/04/20
         
         display image -> from IPython.display import Image
                          Image(filename='test.png') 
         
         
         Numpy: linear algebra library for python and its incredibly fast, as its has bindings to C libraries

Numpy Install:
# pip install numpy
# pip list
Or
# conda install numpy
# conda list

Numpy array has 2 flavors: vectors (1D array) and matrices(2D array)

1D array:
>>> import numpy as np
>>> mylist = [1,2,3]
>>> myarray = np.array(mylist)
>>> type(myarray)
numpy.ndarray
>>> myarray.shape
(3,)


2D array:
>>> list_list = [["hi",2], [3,4]]
>>> array_2d = np.array(list_list)
>>> array_2d
array([['hi', '2'],
       ['3', '4']], dtype='<U2')

Here: ‘<U2’ is data type : unicode, as because, we have some data in array is string
>>> array_2d.shape
(2, 2)
>>> array_2d.dtype
dtype('<U2')


>>> np.arange(0,10)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

>>> np.arange(0,11,2)
array([ 0,  2,  4,  6,  8, 10])

>>> np.zeros(5)
array([0., 0., 0., 0., 0.])

>>> np.zeros((5,5))
array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])

>>> np.zeros((5,5)) + 255
array([[255., 255., 255., 255., 255.],
       [255., 255., 255., 255., 255.],
       [255., 255., 255., 255., 255.],
       [255., 255., 255., 255., 255.],
       [255., 255., 255., 255., 255.]])

>>> np.ones(5)
array([1., 1., 1., 1., 1.])


>>> np.ones((5,5))
array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])

>>> np.ones((5,5)) * 10
array([[10., 10., 10., 10., 10.],
       [10., 10., 10., 10., 10.],
       [10., 10., 10., 10., 10.],
       [10., 10., 10., 10., 10.],
       [10., 10., 10., 10., 10.]])

Get 10 even space points between 0 to 5 
>>> np.linspace(0,5,10)
array([0.        , 0.55555556, 1.11111111, 1.66666667, 2.22222222,
       2.77777778, 3.33333333, 3.88888889, 4.44444444, 5.        ])


Identity matrix:
>>> np.eye(5)
array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])



random samples from a uniform distribution
over ``[0, 1)``
>>> np.random.rand(5)
array([0.28316448, 0.34699245, 0.00735591, 0.49559463, 0.37833619])

>>> np.random.rand(5,5)
array([[0.40629973, 0.88445519, 0.71767287, 0.36013307, 0.72516045],
       [0.058752  , 0.15127226, 0.16534372, 0.81502784, 0.46392747],
       [0.6877002 , 0.16145993, 0.59261236, 0.30863749, 0.85114001],
       [0.96011435, 0.48889045, 0.3095665 , 0.97182512, 0.68097203],
       [0.81628511, 0.08560319, 0.27271408, 0.4266054 , 0.91505527]])


sample (or samples) from the "standard normal" distribution
>>> np.random.randn(5)
array([0.56878003, 1.4391297 , 1.14633492, 0.33277097, 0.41541385])


>>> np.random.randint(1,100)
53
>>> np.random.randint(1,100,10)
array([17, 30, 48, 85,  4, 48, 91, 58, 12, 89])

Reshape array in other dimensions:
>>> a = np.arange(25)
>>> a.reshape(5,5)
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])


>>> a = np.random.randint(1,100,10)
a
array([79, 69, 77, 95, 10, 99,  5, 29, 79, 55])
>>> a.min()
5
>>> a.max()
99
>>> a.argmax()
5
>>> a.argmin()
6
>>> a.dtype
dtype('int32') : 32 bit integer

>>> from numpy.random import randint
>>> randint(2,10)



>>> import numpy as np
>>> x = np.array([[2, 4, 6], [6, 8, 10]], np.int32)
>>> print(x)
>>> print("Data type of the array x is:",x.dtype)
# Change the data type of x
>>> y = x.astype(float)
>>> print("New Type: ",y.dtype)
>>> print(y)


>>> a = np.arange(0,11)
>>> a[1:5] = 20
a
>>> array([ 0, 20, 20, 20, 20,  5,  6,  7,  8,  9, 10])


>>> a = np.arange(0,11)
>>> slice_arr = a[1:5]
>>> slice_arr
array([1, 2, 3, 4])
>>> slice_arr[:] = 99
>>> a
array([ 0, 99, 99, 99, 99,  5,  6,  7,  8,  9, 10])

>>> copy_array = slice_arr.copy()
>>> copy_array[:] = 20
>>> copy_array
array([20, 20, 20, 20])
>>> a
array([ 0, 99, 99, 99, 99,  5,  6,  7,  8,  9, 10])


>>> a = np.array([1,2,3,4,5,6])
>>> b = np.split(a, 2)
>>> b
[array([1, 2, 3]), array([4, 5, 6])]


>>> a = np.arange(0,11)
>>> a > 5
array([False, False, False, False, False, False,  True,  True,  True,
        True,  True])
>>> a[a>5]
array([ 6,  7,  8,  9, 10])


>>> a * a
array([  0,   1,   4,   9,  16,  25,  36,  49,  64,  81, 100])


>>> 1/0
ZeroDivisionError: division by zero

>>> a/a
array([nan,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])

>>> 1 / a
array([       inf, 1.        , 0.5       , 0.33333333, 0.25      ,
       0.2       , 0.16666667, 0.14285714, 0.125     , 0.11111111,
       0.1       ])


>>> a ** 2
array([  0,   1,   4,   9,  16,  25,  36,  49,  64,  81, 100], dtype=int32)


>>> np.sqrt(a)
>>> np.exp(a)
>>> np.max(a)
>>> np.min(a)
>>> np.sin(a)
>>> np.log(a)
array([      -inf, 0.        , 0.69314718, 1.09861229, 1.38629436,
       1.60943791, 1.79175947, 1.94591015, 2.07944154, 2.19722458,
       2.30258509])




         
        
